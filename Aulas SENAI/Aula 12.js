// variaveis compostas / vetores - abrays

//COMO UMA CASA, ONDE CONSEGUE LIDAR APENAS COM UMA FAMILIA EM SUA NORMALIDADE, AGORA EM UM PR√âDIO, CONSEGUIMOS LIDAR COM V√ÅRIAS





// Variaveiss simples, com um dado por vez
let fruta = "Ma√ß√£";  
fruta = "Banana"; //aqui √© quando queremos modificar o que tem em nossa variavel 

// Variavel composta, varias informa√ßoes armazenadas em uma √∫nica variavel
// Cada uma com o √≠ndice iniciado de 0
let frutas = ["Ma√ß√£", "Banana", "Abacaxi", "Uva"]; //ENTENDER AS POSI√áOES DE CADA UM DESSES DADOS
console.log(frutas); // a ma√ß√£ est√° no andar 0, a banana √© 1, abacaxi 2, uva 3
console.log(frutas[1]); //olhe para tudo isso como um pr√©dio de andares

// Declarando uma lista vazia
let listaVazia = []; //como se fosse um pr√©dio sem nenhum morador
//pq colocariamos uma lista vazia? Para ir adicionando as coisas, como uma lista de compras.

//Declara√ß√£o de uma lista de n√∫meros
let numeros = [1, 2, 8, 5, 9];

//Declara√ß√£o de uma lista de nomes - strings
let nomes = ["Ana", "Jo√£o", "Maria"];

//Declara√ß√£o de uma lista com mesclagem
let listaMista = [4, "feij√£o", 5, "arroz", true]; //considerado tamb√©m um tipo de dado, assim como: STRING, NUMBER (INTEIRO), BOOLEAN

// Declara√ß√£o de uma lista com outras listas
let listadeVetores = [["coca-cola", "hot-dog"], [5.00, "e", 10.00]]; //em cada colchete temos uma posi√ß√£o
console.log(listadeVetores[0] [1]) //quando n√≥s adicionamos esse um, perguntamos: "Quem est√° no apartamento 0, na posi√ß√£o 1?"

// O QUE √â UMA MATRIZ
//posi√ßoes das coisas []

//Aprendendo a atualizar seus dados
let frutas2 = ["Ma√ß√£", "Banana", "Abacaxi", "Uva"]; // a uva odiou o pr√©dio e vai se mudar, a melancia vai entrar no seu lugar!
console.log(frutas2);                         
frutas2[3] = "Melancia" //ela est√° assumindo apenas uma posi√ß√£o do nosso pr√©dio, um apartamnto dele
console.log(frutas2) //aqui no console ta mostrando essa altera√ß√£o
console.log(`Olhaaaa, a uva se mudou!! Agora quem manda √© a melancia! üòé`);

//Como conseguimos incluir um novo morador? - inserindo um novo item na lista
//PUSH - EMPURRAR
frutas2.push("Laranja"); // √© MAIS ATUALIZADO E MAIS UTILIZADO apropriado para colocar sempre ao final uma informa√ß√£o
frutas2[4] = "Laranja"; //esse s√≥ seria usavel se sabemos qual √© a posi√ß√£o ao qual queremos adicionar isso

//AGORA com o operador SPREAD ...
frutas2 = [...frutas2, "Laranja"] // o spread significa expalhar
// esse representa, colocar todo o seu conteudo dentro do seu vetor
// colocamos o vetor e adicionado LARANJA

// Quando queremos incluir em uma posi√ß√£o especifica
frutas2.splice(2,0, "Morango") // O MORANGO QUER ENTRAR NA POSI√á√ÉO 2 // O ZERO INDICA QUE NINGUEM SAI, SO MUDA // APOS ISSO TEMOS O MORANGO, INDICANDO O QUE QUEREMOS COLOCAR
console.log(frutas2)

frutas2.splice(3,0, "Kiwi", "Pera");
console.log(frutas2)

//Quando queremos remover um da lista
//usamos o splice so que para o contr√°rio
frutas2.splice(3, 1);
console.log(frutas2); //a√≠ aqui no caso, no terminal, n√≥s excluimos o KIWI

frutas2.shift(); //tira o primeiro item da lista
frutas2.pop(); //tira o ultimo item da lista
console.log(frutas2);
// tirou a primeira fruta: MA√á√É e a ultima (laranja duplicada sem querer).

frutas2 = ["Ma√ß√£", "Banana", "Morango", "Abacaxi", "Melancia", "Laranja", "Uva"];
console.log(frutas2[4]); // posi√ß√£o especifica
console.log(frutas2.slice(0,4)); //zero a posi√ß√£o e quatro a quantidade
console.log(frutas2.slice(1)); //mostrando da posi√ß√£o at√© a ultima
console.log(frutas2.slice(-1)); //numeros de itens do fim ao inicio
console.log(frutas2.length); //total de itens da lista
frutas2.sort() //ordena a lista de ordem crescente
console.log(frutas2)
frutas2.reverse() //ordenando de ordem decrescente
console.log(frutas2)